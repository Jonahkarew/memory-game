{"version":3,"sources":["components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","App","state","pokemonData","Object","toConsumableArray","currentScore","hiScore","handleCardClick","cardId","isCorrect","_this","forEach","pokemon","id","clicked","rightChoice","wrongChoice","randomize","sort","Math","random","setState","_this2","this","components_Wrapper","map","key","src","image","alt","name","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0uCAOeA,MAJf,SAAiBC,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMK,kBC+G1BC,6MA3GbC,MAAQ,CACNC,YAAYC,OAAAC,EAAA,EAAAD,CAAKD,GACjBG,aAAc,EACdC,QAAS,KAeXC,gBAAkB,SAAAC,GAIhB,IAAIC,GAAY,EAEVP,EAAWC,OAAAC,EAAA,EAAAD,CAAOO,EAAKT,MAAMC,aAGnCA,EAAYS,QAAQ,SAAAC,GACdA,EAAQC,KAAOL,IACbI,EAAQE,UACVL,GAAY,EACZG,EAAQE,SAAU,MAKxBL,EAAYC,EAAKK,YAAYb,GAAeQ,EAAKM,YAAYd,MAK/Da,YAAc,SAAAb,GACZ,IAAMe,EAAYf,EAAYgB,KAAK,iBAAM,GAAMC,KAAKC,WAC9Cf,EAAeK,EAAKT,MAAMI,aAAe,EAC3CC,EAAUI,EAAKT,MAAMK,QAGrBD,EAAeC,IACjBA,EAAUD,GAGZK,EAAKW,SAAS,CACZnB,YAAae,EACbZ,aAAcA,EACdC,QAASA,OAMbU,YAAc,SAAAd,GAEZ,IAAMe,EAAYf,EAAYgB,KAAK,iBAAM,GAAMC,KAAKC,WAEpDH,EAAUN,QAAQ,SAAAC,GAAO,OAAKA,EAAQE,SAAS,IAG/CJ,EAAKW,SAAS,CACZnB,YAAae,EACbZ,aAAc,6EAOV,IAAAiB,EAAAC,KAGN,OACE5B,EAAAC,EAAAC,cAAC2B,EAAD,KACE7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBAAd,wBAEAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,kBAA6CyB,KAAKtB,MAAMI,aAAxD,mBAAsFkB,KAAKtB,MAAMK,SAE/FX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZyB,KAAKtB,MAAMC,YAAYuB,IAAI,SAAAb,GAC3B,OACCjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAU4B,IAAKd,EAAQC,IACpClB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,OAAK8B,IAAKf,EAAQgB,MACRC,IAAKjB,EAAQkB,KACbhC,UAAU,eACViC,QAAS,kBAAMT,EAAKf,gBAAgBK,EAAQC,oBA/FtDmB,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bb9dbbc7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Wrapper from \"./components/Wrapper\"\nimport pokemonData from './pokemon.json'\n\n//set intial states\nclass App extends Component {\n  state = {\n    pokemonData: [...pokemonData],\n    currentScore: 0,\n    hiScore: 0\n  };\n  //function for shuffling cards\n\n  // shuffleCards = () => {\n  //   const shuffledPokemonList = this.state.pokemonList.sort(() => 0.5 - Math.random());\n  \n  //   this.setState({\n  //     pokemonList: shuffledPokemonList\n  //   });\n  // };\n\n\n  \n  //method to click and change state of cards\n  handleCardClick = cardId => {\n\n    \n   \n    let isCorrect = false;\n\n    const pokemonData = [...this.state.pokemonData];\n\n    //\n    pokemonData.forEach(pokemon => {\n      if (pokemon.id === cardId){\n        if(!pokemon.clicked){\n          isCorrect = true;\n          pokemon.clicked = true;\n        }\n      }\n    })\n\n    isCorrect ? this.rightChoice(pokemonData) : this.wrongChoice(pokemonData)\n  };\n\n\n  //what happens when an image is clicked for the first time\n  rightChoice = pokemonData => {\n    const randomize = pokemonData.sort(() => 0.5 - Math.random());\n    const currentScore = this.state.currentScore + 1;\n    var hiScore = this.state.hiScore;\n\n    //edit highscore depending on current score\n    if (currentScore > hiScore){\n      hiScore = currentScore;\n    }\n    // \n    this.setState({\n      pokemonData: randomize,\n      currentScore: currentScore,\n      hiScore: hiScore\n    })\n     \n  }\n\n  //what happens when an image has already been clicked and is clicked again\n  wrongChoice = pokemonData => {\n    //randomize order of cards\n    const randomize = pokemonData.sort(() => 0.5 - Math.random());\n    // sets clicked state back to false\n    randomize.forEach(pokemon => (pokemon.clicked =false));\n\n    //shuffles the cards and resets the score\n    this.setState({\n      pokemonData: randomize,\n      currentScore: 0\n    })\n  }\n  \n  \n\n  //render the cards\n  render(){\n    // const {pokemonList} = this.state;\n\n    return (\n      <Wrapper>\n        <div className=\"container\">\n        <h1 className=\"title text-center\">Pokemon Memory Game</h1>\n        </div>\n        <div className=\"text-center\">Current Score: {this.state.currentScore} ||| Highscore: {this.state.hiScore}</div>\n        {\n          <div className=\"row\">\n            {this.state.pokemonData.map(pokemon => {\n             return(\n              <div className=\"pokemon\" key={pokemon.id}>\n                <div className=\"img-container col-2\">\n                  <img src={pokemon.image}\n                            alt={pokemon.name}\n                            className=\"pokemonImage\"\n                            onClick={() => this.handleCardClick(pokemon.id)}\n                  />\n                </div>\n              </div>\n            )\n        })}\n      </div>  \n        }\n      </Wrapper>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}